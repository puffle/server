generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AuthToken {
  userId    Int      @map("user_id") @db.UnsignedInt
  selector  String   @db.Char(36)
  validator String   @db.Char(60)
  timestamp DateTime @default(now()) @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, selector])
  @@map("auth_tokens")
}

model Ban {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  userId      Int      @map("user_id") @db.UnsignedInt
  expires     DateTime @db.Timestamp(0)
  moderatorId Int?     @map("moderator_id") @db.UnsignedInt
  message     String?  @db.VarChar(60)
  issued      DateTime @default(now()) @db.Timestamp(0)
  moderator   User?    @relation("bans_moderatorId", fields: [moderatorId], references: [id], onUpdate: SetNull)
  user        User     @relation("bans_userId", fields: [userId], references: [id], onDelete: Cascade)

  @@index([moderatorId])
  @@index([userId])
  @@map("bans")
}

model Buddy {
  userId  Int  @map("user_id") @db.UnsignedInt
  buddyId Int  @map("buddy_id") @db.UnsignedInt
  buddy   User @relation("buddies_buddyId", fields: [buddyId], references: [id], onDelete: Cascade)
  user    User @relation("buddies_userId", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, buddyId])
  @@index([buddyId])
  @@map("buddies")
}

model FurnitureInventory {
  userId   Int  @map("user_id") @db.UnsignedInt
  itemId   Int  @map("item_id") @db.UnsignedInt
  quantity Int  @db.UnsignedInt
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, itemId])
  @@map("furniture_inventories")
}

model Furniture {
  id          Int  @id @default(autoincrement()) @db.UnsignedInt
  userId      Int  @map("user_id") @db.UnsignedInt
  furnitureId Int  @map("furniture_id") @db.UnsignedInt
  x           Int  @default(0) @db.UnsignedSmallInt
  y           Int  @default(0) @db.UnsignedSmallInt
  rotation    Int  @default(1) @db.UnsignedSmallInt
  frame       Int  @default(1) @db.UnsignedSmallInt
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("furniture")
}

model IglooInventory {
  userId  Int  @map("user_id") @db.UnsignedInt
  iglooId Int  @map("igloo_id") @db.UnsignedInt
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, iglooId])
  @@map("igloo_inventories")
}

model Igloo {
  userId   Int  @id @map("user_id") @db.UnsignedInt
  type     Int  @default(1) @db.UnsignedInt
  flooring Int  @default(0) @db.UnsignedInt
  music    Int  @default(0) @db.UnsignedInt
  location Int  @default(1) @db.UnsignedInt
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("igloos")
}

model Ignore {
  userId      Int  @map("user_id") @db.UnsignedInt
  ignoreId    Int  @map("ignore_id") @db.UnsignedInt
  ignoredUser User @relation("ignores_ignoreId", fields: [ignoreId], references: [id], onDelete: Cascade)
  user        User @relation("ignores_userId", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, ignoreId])
  @@index([ignoreId])
  @@map("ignores")
}

model Inventory {
  userId Int  @map("user_id") @db.UnsignedInt
  itemId Int  @map("item_id") @db.UnsignedInt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, itemId])
  @@map("inventories")
}

model User {
  id                  Int                  @id @default(autoincrement()) @db.UnsignedInt
  username            String               @unique @db.VarChar(12)
  email               String?              @db.VarChar(254)
  password            String               @db.Char(60)
  rank                Int                  @default(0) @db.UnsignedTinyInt
  permaBan            Boolean              @default(false) @map("perma_ban")
  joinTime            DateTime             @default(now()) @map("join_time") @db.Timestamp(0)
  coins               Int                  @default(500) @db.UnsignedInt
  head                Int                  @default(0) @db.UnsignedInt
  face                Int                  @default(0) @db.UnsignedInt
  neck                Int                  @default(0) @db.UnsignedInt
  body                Int                  @default(0) @db.UnsignedInt
  hand                Int                  @default(0) @db.UnsignedInt
  feet                Int                  @default(0) @db.UnsignedInt
  color               Int                  @default(1) @db.UnsignedInt
  photo               Int                  @default(0) @db.UnsignedInt
  flag                Int                  @default(0) @db.UnsignedInt
  auth_tokens         AuthToken[]
  bans_moderatorId    Ban[]                @relation("bans_moderatorId")
  bans_userId         Ban[]                @relation("bans_userId")
  buddies_buddyId     Buddy[]              @relation("buddies_buddyId")
  buddies_userId      Buddy[]              @relation("buddies_userId")
  placed_furniture    Furniture[]
  furniture_inventory FurnitureInventory[]
  igloo_inventory     IglooInventory[]
  igloo               Igloo?
  ignores_ignoreId    Ignore[]             @relation("ignores_ignoreId")
  ignores_userId      Ignore[]             @relation("ignores_userId")
  inventory           Inventory[]

  @@map("users")
}

model World {
  id         String @id @db.VarChar(100)
  population Int    @default(0) @db.UnsignedSmallInt

  @@map("worlds")
}
